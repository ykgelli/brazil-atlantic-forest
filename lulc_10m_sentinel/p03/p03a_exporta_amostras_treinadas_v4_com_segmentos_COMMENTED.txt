// Define the Atlantic Forest boundary
var limite_MA = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-48.593359954293625, -30.678347823900353],
          [-47.275000579293625, -25.525376684152373],
          [-40.595313079293625, -23.284530667538736],
          [-33.915625579293625, -6.580343714417967],
          [-35.453711516793625, -4.217995607905081],
          [-44.198828704293625, -17.856203449528717],
          [-50.483008391793625, -17.52126295946964],
          [-55.712500579293625, -21.74193426005608],
          [-55.492774016793625, -29.72888025446976]]]);

// Define the output version
var versao_out = '1';

// Define the version of the points
var versao_pt = '1';

// Define the year
var ano = 2018;

// Define the output directory
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/S2_2024/MATA_ATLANTICA/';

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define the visualization parameters
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};

// Load the regions collection
var regioesCollection = ee.FeatureCollection('projects/mapbiomas-workspace/AUXILIAR/Mata_Atlantica_regions_col6_area2000');//.filterBounds(geometry);

// Add the regions collection to the map
Map.addLayer(regioesCollection);

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define the visualization parameters
var vis = {
    'min': 0,
    'max': 34,
    'palette': palettes.get('classification2')
};

//Map.addLayer(bioma250mil_MA,{},"biome MA",false)

// Define the asset path for the mosaics
var asset_mosaicosS2 = 'projects/mapbiomas-mosaics/assets/SENTINEL/BRAZIL/mosaics-3';

// Define the biome
var bioma = "MATAATLANTICA";

// Load the stable samples
var pts = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/S2_2024/MATA_ATLANTICA/samples_S2_stable_v' + versao_pt + '_reg');

// Load the S2 clusters image
var S2_cluster = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/S2_2024/MATA_ATLANTICA/mosaicos_MA_S2_clusters_2106_2023')

//var anos = [
//            2016,2017,2018,2019,
//            2020,2021,
//            2022,2023
//            ];

// Import the function to add indices for the Caatinga biome
var addIndexCaatinga = require('users/marcosrosaUSP/MapBiomas_col9_MataAtlan:Mata_Atlantica_SENTINEL2/processa_Bandas_Sentinel2_CAATINGA');

// Define the color palette for NDVI amplitude
var ndvi_color = '0f330f, 005000, 4B9300, 92df42, bff0bf, FFFFFF, eee4c7, ecb168, f90000';

// Define the visualization parameters for NDVI amplitude
var visParNDFI_amp = {'min':0, 'max':300, 'palette':ndvi_color};

// Define the list of regions
var regioes_lista = [
      ['reg_01'],['reg_02'],['reg_03'],['reg_04'],['reg_05'],['reg_06'],['reg_07'],['reg_08'],['reg_09'],['reg_10'],['reg_11'],['reg_12'],['reg_13'],['reg_14'],['reg_15'],
      ['reg_16'],['reg_17'],['reg_18'],['reg_19'],['reg_20'],['reg_21'],['reg_22'],['reg_23'],['reg_24'],['reg_25'],['reg_26'],['reg_27'],['reg_28'],['reg_29'],['reg_30']
      ];
 
// Loop over the list of regions
for (var i_regiao=0;i_regiao<regioes_lista.length; i_regiao++){
  // Get the current region information
  var lista = regioes_lista[i_regiao];
  var regiao = lista[0];

  // Filter the regions collection to get the current region
  var limite = regioesCollection.filterMetadata('reg_id', "equals", regiao);
  
  // Define the asset path for the mosaics
  var asset = 'projects/mapbiomas-mosaics/assets/SENTINEL/BRAZIL/mosaics-3';
  
  // Filter the mosaic collection for the current year and biome
  var collection = ee.ImageCollection(asset)
        .filter(ee.Filter.eq('version', '3'))
        .filter(ee.Filter.eq('year', ano))
        .filter(ee.Filter.inList('biome', [
            'MATAATLANTICA',
        ])); 

  // Create a mosaic from the filtered collection
  var mosaicoTotal = collection.mosaic()

  // Add indices for the Caatinga biome
  mosaicoTotal = addIndexCaatinga.get(mosaicoTotal);
  
  // Add the clusters and indices for the current year to the mosaic image
  mosaicoTotal = mosaicoTotal.addBands(S2_cluster.select([
    'clusters_'+ano, 'ndvi_median_dry_'+ano,'ndvi_median_wet_'+ano,'ndwi_median_'+ano, 'green_median_texture_'+ano
    ]))
  
  // Add the mosaic image to the map
  Map.addLayer(mosaicoTotal, {'bands': ['swir1_median', 'nir_median', 'red_median'],
    'gain': [0.08, 0.07, 0.2],'gamma': 0.85}, 'Sentinel 2 '+ano, false);
    
  // Filter the stable samples for the current region
  var pts_reg = pts.filterMetadata('reg_id', 'equals', regiao)
  
  // Sample the mosaic image using the stable samples for the current region
  var training = mosaicoTotal.sampleRegions({
      'collection': pts_reg,
      'scale': 10,
      'tileScale': 4,
      'geometries': true
  });

  //print('amostras treinadas',training.limit(1))

  // If this is the first region, initialize the training sample collection
  if (i_regiao == 0){ var training_reg = training }  
  // Otherwise, merge the current region's sample into the existing collection
  else {training_reg = training_reg.merge(training); }
}    

// Export the training sample collection to an asset
Export.table.toAsset(training_reg, 'pontos_train_v'+versao_out+'_'+ano, dirout + 'pontos_train_v'+versao_out+'_'+ano);
