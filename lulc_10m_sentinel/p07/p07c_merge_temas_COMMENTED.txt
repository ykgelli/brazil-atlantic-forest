var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-56.05851880152852, -30.04613371617718],
          [-49.20305005152852, -30.841736663987348],
          [-41.46867505152852, -23.861579784474333],
          [-34.17375317652852, -8.163484389272043],
          [-32.278611574966014, -3.7226814467955944],
          [-35.66789380152852, -4.582835761516412],
          [-49.07121411402852, -16.947367124654484],
          [-56.10246411402852, -21.01873071079243]]]);

// Define the biome
var bioma = "MATAATLANTICA";

// Define the input and output versions
var vesion_in = '21';
var versao_out = '32';

// Define the minimum number of connected pixels for a feature to be considered valid
var min_connect_pixel = 40;

// Define the input and output prefixes for the asset names
var prefixo_in = 'MA_S2_p06_varzea_v';
var prefixo_out = 'MA_S2_p07c_merge_v';

// Define the output directory for the asset
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-ma-S2/';

// Load the input images
var class_uso = ee.Image(dirout+'MA_S2_p06_v'+'21'); //.mask(bioma250mil_MA)
var class_var = ee.Image(dirout+'MA_S2_p07_varzea_v'+'12'); //.mask(bioma250mil_MA)
var class_nor = ee.Image(dirout+'FNoronha_p07_v'+'22'); //.mask(bioma250mil_MA)
var class_agr = ee.Image(dirout+'MA_S2_p06_agric_v'+'21'); //.mask(bioma250mil_MA)

// Load the palettes for visualization
var palettes = require('users/mapbiomas/modules:Palettes.js');
var pal = palettes.get('classification2');

// Define the visualization parameters for the images
var vis = {
      bands: 'classification_2023',
    'min': 0,
    'max': 69,
    'palette': palettes.get('classification9')
    };
var vis2 = {
    'min': 0,
    'max': 69,
    'palette': palettes.get('classification9')
};

// Add the input images to the map for visualization
Map.addLayer(class_uso, vis, 'class_uso', false);
Map.addLayer(class_var, vis, 'class_var', false);
Map.addLayer(class_nor, vis, 'class_nor', false);
Map.addLayer(class_agr, vis, 'class_agr', false);

// Print the input images to the console (for debugging)
//print('class_uso',class_uso)
//print('class_var',class_var)
//print('class_nor',class_nor)
//print('class_agr',class_agr)

// Define the years to process
var anos = ['2016','2017','2018','2019','2020','2021', '2022','2023'];
//var anos = ['2023']

// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){  
  var ano = anos[i_ano]; 

  // Select the classification band for the current year from each input image
  var class_uso_ano = class_uso.select('classification_'+ano).toInt8()
  var class_var_ano = class_var.select('classification_'+ano).toInt8()
  var class_nor_ano = class_nor.select('classification_2023').rename('classification_'+ano).toInt8()
  var class_agr_ano = class_agr.select('classification_'+ano).toInt8()

  // Create a mask for the class 21 (varzea) from the class_uso image
  var class__21_ano = class_uso_ano.eq(21)

  // Remap the class 11 (varzea) from the class_var image to the class 11 in the output image
  var class_var__11 = class_var_ano.eq(11).mask(class__21_ano).remap([1],[11]).rename('classification_'+ano).toInt8()

  // Remap the class 19 (agriculture) from the class_agr image to the class 19 in the output image
  var class_agr__19 = class_agr_ano.eq(19).mask(class__21_ano).remap([1],[19]).rename('classification_'+ano).toInt8()

  // Add the remapped images to the map for visualization (for debugging)
  //Map.addLayer(class_var__11, vis, 'class_var__11');
  //Map.addLayer(class_agr__19, vis, 'class_agr__19');

  // Create an image collection from the remapped images
  var img_col = ee.ImageCollection.fromImages([class_uso_ano,class_nor_ano,class_var__11,class_agr__19]).mosaic()

  // Combine the images from each year into a single image
  if (i_ano == 0){ var class_outTotal = img_col }  
  else {class_outTotal = class_outTotal.addBands(img_col); }
}

// Print the final output image to the console (for debugging)
print(class_outTotal)

// Add the final output image to the map for visualization
Map.addLayer(class_outTotal, vis, 'class_outTotal');
// Map.addLayer(class_out2, vis, 'class_out2');

// Set the metadata for the output image
class_outTotal = class_outTotal
.set('territory', 'BRAZIL')
.set('biome', 'MATA ATÃ‚NTICA')
.set('source', 'arcplan')
.set('version', versao_out)
.set('year', versao_out)
.set('collection_id', 2)

// Export the output image to an asset
Export.image.toAsset({
    'image': class_outTotal,
    'description': prefixo_out+versao_out,
    'assetId': dirout+prefixo_out+versao_out,
    'pyramidingPolicy': {
        '.default': 'mode'
    },
    'region': geometry,
    'scale': 10,
    'maxPixels': 1e13
});
