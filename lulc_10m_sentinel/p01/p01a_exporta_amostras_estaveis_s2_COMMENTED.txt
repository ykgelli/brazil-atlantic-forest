// Define the Atlantic Forest boundary
var limite_MA = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-48.593359954293625, -30.678347823900353],
          [-47.275000579293625, -25.525376684152373],
          [-40.595313079293625, -23.284530667538736],
          [-33.915625579293625, -6.580343714417967],
          [-35.453711516793625, -4.217995607905081],
          [-44.198828704293625, -17.856203449528717],
          [-50.483008391793625, -17.52126295946964],
          [-55.712500579293625, -21.74193426005608],
          [-55.492774016793625, -29.72888025446976]]]);

// Define the year
var year = 2020;

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define the visualization parameters
var vis = {
    'bands': ['classification_' + String(year)],
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

// Define the output directory
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/S2_2024/MATA_ATLANTICA/'

// Define the output version
var version_out = '1';

// Load the S2 beta image
var S2_beta = ee.Image('projects/mapbiomas-workspace/public/collection_S2_beta/collection_LULC_S2_beta')

// Add the S2 beta image to the map
Map.addLayer(S2_beta, vis, 'S2_beta 2020', true);

// Print the S2 beta image
print('S2_beta',S2_beta)

// Define the years for which to create the frequency mask
var anos = ['2016','2017','2018','2019','2020','2021','2022'];

// Create a list of images for each year, remapping the classes
var colList = anos.map(function (year) {
        // Select the classification band for the current year
        var image = S2_beta.select('classification_'+year)
                  // Remap the classes to the desired values
                  .remap(
                  [3, 4, 5,49,11,12,13,32,29,50,9,15,18,19,20,21,36,39,40,41,46,47,48,22,23,24,25,30,26,31,33],
                  [3, 4, 3, 3,21,12,21,21,29,50,9,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,33,33,33])
        // Convert the image to int8
        return image.int8();
    }
);

// Print the list of images
print(colList)

// Create an ImageCollection from the list of images
var collection = ee.ImageCollection(colList)

// Define a function to get unique values from an array
var unique = function(arr) {
    var u = {},
        a = [];
    for (var i = 0, l = arr.length; i < l; ++i) {
        if (!u.hasOwnProperty(arr[i])) {
            a.push(arr[i]);
            u[arr[i]] = 1;
        }
    }
    return a;
};

/**
 * REFERENCE MAP
 */

// Define a function to create a frequency mask for a given class
var getFrenquencyMask = function(collection, classId) {
    // Convert the class ID to an integer
    var classIdInt = parseInt(classId, 10);
    // Map over the collection and create a mask for each image
    var maskCollection = collection.map(function(image) {
        return image.eq(classIdInt);
    });
    // Calculate the sum of the masks for each pixel
    var frequency = maskCollection.reduce(ee.Reducer.sum());
    // Create a mask where the frequency is greater than or equal to the threshold
    var frequencyMask = frequency.gte(classFrequency[classId])
        // Multiply the mask by the class ID
        .multiply(classIdInt)
        // Convert the mask to byte
        .toByte();
    // Mask the frequency mask to only include pixels with the specified class ID
    frequencyMask = frequencyMask.mask(frequencyMask.eq(classIdInt));
    // Rename the band and set the class ID as a property
    return frequencyMask.rename('frequency').set('class_id', classId);
};


// Define the frequency threshold for each class
var classFrequency = {"3": 7, "4": 7, "50": 7, "9": 7, "12": 7, "21": 7, "22": 7, "29": 7, "33": 7}

// Create a list of frequency masks for each class
var frequencyMasks = Object.keys(classFrequency).map(function(classId) {
    return getFrenquencyMask(collection, classId);
});

// Create an ImageCollection from the list of frequency masks
frequencyMasks = ee.ImageCollection.fromImages(frequencyMasks);

// Reduce the ImageCollection to a single image, taking the first non-null value for each pixel
var referenceMap = frequencyMasks.reduce(ee.Reducer.firstNonNull()).clip(limite_MA);

// Mask the reference map to exclude pixels with class 27
referenceMap = referenceMap.mask(referenceMap.neq(27)).rename("reference");

// Define the visualization parameters
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

// Add the reference map to the map
Map.addLayer(referenceMap, vis, 'Classes persistentes 16 a 22', true);

// Export the reference map to an asset
Export.image.toAsset({
    "image": referenceMap.toInt8(),
    "description": 'MA_amostras_estaveis16a22_colS2_v'+version_out,
    "assetId": dirout + 'MA_amostras_estaveis16a22_colS2_v'+version_out,
    "scale": 10,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": limite_MA
});
