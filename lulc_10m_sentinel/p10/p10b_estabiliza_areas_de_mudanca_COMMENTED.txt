var limite_MA2 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-49.247700941636595, -29.022523383158095],
          [-48.7353515625, -28.806173508854762],
          [-48.14208984375, -27.537500308359466],
          [-48.39445536421073, -26.590423365831768],
          [-48.328857421875, -25.809781975840405],
          [-47.52238508646195, -24.961533378966568],
          [-46.702880859375, -24.467150664738988],
          [-46.201591895409365, -24.133590011676564],
          [-45.10986328125, -24.016361823963027],
          [-44.71435546875, -23.52370005882413],
          [-43.83867478555652, -23.28797276201207],
          [-41.868896484375, -23.099944212531387],
          [-41.53739054012016, -22.54787404186189],
          [-40.858154296875, -22.055096050575845],
          [-40.813241260469226, -21.30385052235623],
          [-40.341796875, -20.745840238902247],
          [-39.98919871239127, -19.972814500963008],
          [-39.70458984375, -19.73568357862943],
          [-39.6146087043204, -19.29822872014044],
          [-39.57324612304177, -18.26836581577437],
          [-39.0838623046875, -17.748686651728793],
          [-39.055713575251104, -17.0336668879567],
          [-38.7432861328125, -15.866241564066616],
          [-38.93015197494924, -14.712551816040117],
          [-38.73779296875, -13.336175186494915],
          [-38.221435546875, -13.100879969526476],
          [-36.826171875, -10.908830155722121],
          [-35.4638671875, -9.633245727691198],
          [-34.793701171875, -8.461505694920898],
          [-34.683837890625, -7.079088026071719],
          [-34.88210218624309, -6.3308187780420475],
          [-32.14632391454163, -3.6581520322674366],
          [-35.233154296875, -5.0800010938086215],
          [-35.6396484375, -5.101887070062321],
          [-35.60086706035952, -5.614547055897661],
          [-35.441686579377, -6.423044456643987],
          [-35.8154296875, -7.547655601241832],
          [-35.77628458120148, -7.890311935689954],
          [-36.8096923828125, -8.933913624704099],
          [-37.452392578125, -10.093262015308474],
          [-38.3148193359375, -11.280773781192053],
          [-39.5123291015625, -11.78670268848142],
          [-40.616455078125, -13.2399454992863],
          [-40.6439208984375, -14.243086862716888],
          [-41.396484375, -14.838611553384807],
          [-41.90185546875, -14.966013251567153],
          [-42.5390625, -15.802824941413187],
          [-42.550048828125, -17.14603949574698],
          [-43.890380859375, -18.594188856740427],
          [-43.7255859375, -19.575317892869442],
          [-44.670737078228704, -19.268247267184112],
          [-45.0439453125, -19.414792438099557],
          [-45.46142578125, -19.91138351415555],
          [-46.021728515625, -20.7047387200555],
          [-46.966552734375, -20.365227537412434],
          [-47.098388671875, -19.963022929830807],
          [-47.493896484375, -19.611543503814232],
          [-47.96630859375, -19.559790136497398],
          [-48.416748046875, -19.559790136497398],
          [-49.04296875, -19.694314241825747],
          [-49.998779296875, -19.373340713364044],
          [-49.493408203125, -19.2489223284628],
          [-47.757568359375, -19.020577110966794],
          [-47.98828125, -18.323240460443383],
          [-48.62548828125, -17.75914975540014],
          [-49.207763671875, -17.790535393588964],
          [-51.119384765625, -18.417078658661257],
          [-51.85546875, -20.097206227083888],
          [-52.88818359375, -21.841104749065032],
          [-54.33837890625, -21.5041855007784],
          [-55.294189453125, -21.80030805097258],
          [-55.4150390625, -23.23125092389778],
          [-55.458984375, -24.12670195868167],
          [-54.6240234375, -23.93605491459982],
          [-54.404296875, -24.39713301739104],
          [-54.744873046875, -25.681137335685307],
          [-53.96484375, -25.770213848960246],
          [-53.85498046875, -26.95145308349825],
          [-54.9755859375, -27.498526722798296],
          [-55.47821044921875, -28.069556808283593],
          [-55.14389607787536, -28.294019340320542],
          [-54.843276751098756, -28.455948569287795],
          [-54.47755233547173, -28.574911416473032],
          [-54.08786740173093, -28.686648423642083],
          [-53.37158203125, -29.046565622728846],
          [-53.743743896484375, -29.424048845483828],
          [-53.89471068932722, -29.476890814513165],
          [-53.96333274830807, -29.516463876552184],
          [-53.985933193466906, -29.466627605546755],
          [-54.01399085963391, -29.362974979934112],
          [-54.0957995760449, -29.356021030068643],
          [-54.154222913515014, -29.314313841353393],
          [-54.23853854957156, -29.313083872479314],
          [-54.34931514088896, -29.360217477461482],
          [-54.37451966390222, -29.251873401377896],
          [-54.41987650022799, -29.22165031302486],
          [-54.561629026807395, -29.255956269857826],
          [-54.62100646401336, -29.232741355021034],
          [-54.69684636444414, -29.21513553302705],
          [-54.80832142057618, -29.211841387289443],
          [-54.86783664015559, -29.201620760910515],
          [-54.861083387822305, -29.286939284390016],
          [-54.936762801395275, -29.29077843021244],
          [-54.934557778030864, -29.317890891762687],
          [-54.89637833995612, -29.355389471176345],
          [-54.918606622151415, -29.380926390970743],
          [-54.971869817666686, -29.365728890813415],
          [-55.011401674227045, -29.360099098278926],
          [-55.0234626088652, -29.31855224246986],
          [-55.11566162109375, -29.29358522654161],
          [-55.1383134470135, -29.344453559309528],
          [-55.169219970703125, -29.438401595657513],
          [-55.054316400333846, -29.54316711975633],
          [-54.971431829700066, -29.560110616981305],
          [-54.8246791955296, -29.481057814453678],
          [-54.772348103860324, -29.547101213390164],
          [-54.65399970066687, -29.59875323709413],
          [-54.529287966222284, -29.596952601022753],
          [-54.42106275663161, -29.592662068126202],
          [-54.25211822648299, -29.557985162004776],
          [-54.23838114877856, -29.6057018525106],
          [-54.143545282885725, -29.65695554739698],
          [-53.98760428093533, -29.63544046885246],
          [-53.89482321115236, -29.64842475879738],
          [-53.91323116566139, -29.695990247187094],
          [-53.82999936609964, -29.766196563619406],
          [-53.732642004168156, -29.70057719271144],
          [-53.5803125276326, -29.792259794207105],
          [-53.41292085991745, -29.808497111211725],
          [-53.20404052734375, -29.93589521337243],
          [-52.404220884110465, -30.002515899452863],
          [-51.33087158203125, -29.900186637177384],
          [-50.09765625, -30.002516938570686]]]);

// Define input and output version numbers
var vesion_in = '78';
var version_out = '79';

// Define input and output prefixes for asset names
var prefixo_in = 'MA_S2_p10a_v';
var prefixo_out = 'MA_S2_p10b_v';

// Define the output directory for the asset
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-ma-S2/';

// Load the input Landsat 8 image from the specified directory
var S2_v2 =  ee.Image(dirout + prefixo_in + vesion_in);

// Select the classification bands for the years 2016 to 2023
S2_v2 = S2_v2.select(['classification_2016','classification_2017','classification_2018','classification_2019','classification_2020','classification_2021','classification_2022','classification_2023']);

// Add the input image to the map for visualization
Map.addLayer(S2_v2, {}, 'S2_v2', false);

// Load the palettes module for visualization
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define visualization parameters for the classification bands
var vis = {
    'min': 0,
    'max': 69,
    'palette': palettes.get('classification9')
};

// Add the classification band for 2022 to the map for visualization
Map.addLayer(S2_v2.select('classification_2022'), vis, 'S2_v2 ', true);

// Define an array of years for processing
var anos = [2016,2017,2018,2019,2020,2021,2022,2023];

// Loop through each year in the array
for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

  // Remap the classification values for the current year
  var nChanges = S2_v2.select('classification_'+ano)
                    .remap([3, 4,49,11,12,13,29, 9,19,21,22,33,50],
                           [3,21,21,21,21,21,21,21,21,21,21,21,21])
                           .rename('classification_'+ano);

  // Combine the remapped classification bands for each year
  if (i_ano == 0){ var class_so_flo = nChanges }  
  else {class_so_flo = class_so_flo.addBands(nChanges); }
}

// Calculate the number of changes for each pixel
var num_changes = class_so_flo.reduce(ee.Reducer.countRuns()).subtract(1);

// Add the number of changes image to the map for visualization
Map.addLayer(num_changes, {'min': 0,'max': 6, 'palette': ["#ffffff","#fee0d2","#fcbba1",
            "#fb6a4a","#ef3b2c","#a50f15","#67000d"],'format': 'png'}, 'nChanges',false);

// Identify pixels with more than 3 changes
var erro_changes = num_changes.gte(3).remap([1],[21]);

// Add the error changes image to the map for visualization
Map.addLayer(erro_changes, vis, 'erro_changes', false);

// Loop through each year in the array again
var anos = [2016,2017,2018,2019,2020,2021,2022,2023];
for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];
  
  // Select the classification band for the current year
  var class_ano = S2_v2.select('classification_'+ano);

  // Remap the classification values for the current year
  var class_remap_ano = class_ano.remap([3,4,49,11,12,13,29, 9,19,21,22,25,33,50],
                                        [3,4,49,11,12,21,29, 9,21,21,22,22,33,50]).rename('classification_'+ano);

  // Blend the remapped classification band with the error changes image
  class_remap_ano = class_remap_ano.blend(erro_changes.rename('classification_'+ano));

  // Combine the corrected classification bands for each year
  if (i_ano == 0){ var class_corrigido = class_remap_ano }  
  else {class_corrigido = class_corrigido.addBands(class_remap_ano); }
}

// Add the corrected classification band for 2022 to the map for visualization
Map.addLayer(class_corrigido.select('classification_2022'), vis, 'class_corrigido', true);

// Assign the corrected classification image to a variable
var image = class_corrigido;

// Define an array of years for processing
var years = [
  2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023
    ];

// Create a list of band names based on the years
var bandNames = ee.List(
    years.map(
        function (year) {
            return 'classification_' + String(year);
        }
    )
);

// Generate a histogram dictionary of band occurrences
var bandsOccurrence = ee.Dictionary(
    bandNames.cat(image.bandNames()).reduce(ee.Reducer.frequencyHistogram())
);

// Print the histogram dictionary to the console
print(bandsOccurrence);

// Create a dictionary of images, masking bands with less than 2 occurrences
var bandsDictionary = bandsOccurrence.map(
    function (key, value) {
        return ee.Image(
            ee.Algorithms.If(
                ee.Number(value).eq(2),
                image.select([key]).byte(),
                ee.Image().rename([key]).byte().updateMask(image.select(0))
            )
        );
    }
);

// Convert the dictionary of images to a single image
var imageAllBands = ee.Image(
    bandNames.iterate(
        function (band, image) {
            return ee.Image(image).addBands(bandsDictionary.get(ee.String(band)));
        },
        ee.Image().select()
    )
);

// Add connected pixel count bands to the image
var imageFilledConnected = image.addBands(
    image
        .connectedPixelCount(100, true)
        .rename(bandNames.map(
            function (band) {
                return ee.String(band).cat('_conn')
            }
        ))
);

// Print the image with connected pixel count bands to the console
print(imageFilledConnected);

// Set metadata for the output image
imageFilledConnected = imageFilledConnected
.set('territory', 'BRAZIL')
.set('biome', 'MATAATLANTICA')
.set('source', 'arcplan')
//.set('version', version_out)
.set('collection_id', 2)
.set('description', 'Ajusta transição menor/igual que 0.25ha em falsas transicoes');

// Export the image to an asset
Export.image.toAsset({
    "image": imageFilledConnected.toInt8(),
    'description': prefixo_out+version_out,
    'assetId': dirout+prefixo_out+version_out,
    "scale": 10,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": limite_MA2
});
