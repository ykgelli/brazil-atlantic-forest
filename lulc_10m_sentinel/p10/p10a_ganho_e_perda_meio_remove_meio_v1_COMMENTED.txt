var limite_MA2 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-49.247700941636595, -29.022523383158095],
          [-48.7353515625, -28.806173508854762],
          [-48.14208984375, -27.537500308359466],
          [-48.39445536421073, -26.590423365831768],
          [-48.328857421875, -25.809781975840405],
          [-47.52238508646195, -24.961533378966568],
          [-46.702880859375, -24.467150664738988],
          [-46.201591895409365, -24.133590011676564],
          [-45.10986328125, -24.016361823963027],
          [-44.71435546875, -23.52370005882413],
          [-43.83867478555652, -23.28797276201207],
          [-41.868896484375, -23.099944212531387],
          [-41.53739054012016, -22.54787404186189],
          [-40.858154296875, -22.055096050575845],
          [-40.813241260469226, -21.30385052235623],
          [-40.341796875, -20.745840238902247],
          [-39.98919871239127, -19.972814500963008],
          [-39.70458984375, -19.73568357862943],
          [-39.6146087043204, -19.29822872014044],
          [-39.57324612304177, -18.26836581577437],
          [-39.0838623046875, -17.748686651728793],
          [-39.055713575251104, -17.0336668879567],
          [-38.7432861328125, -15.866241564066616],
          [-38.93015197494924, -14.712551816040117],
          [-38.73779296875, -13.336175186494915],
          [-38.221435546875, -13.100879969526476],
          [-36.826171875, -10.908830155722121],
          [-35.4638671875, -9.633245727691198],
          [-34.793701171875, -8.461505694920898],
          [-34.683837890625, -7.079088026071719],
          [-34.88210218624309, -6.3308187780420475],
          [-32.14632391454163, -3.6581520322674366],
          [-35.233154296875, -5.0800010938086215],
          [-35.6396484375, -5.101887070062321],
          [-35.60086706035952, -5.614547055897661],
          [-35.441686579377, -6.423044456643987],
          [-35.8154296875, -7.547655601241832],
          [-35.77628458120148, -7.890311935689954],
          [-36.8096923828125, -8.933913624704099],
          [-37.452392578125, -10.093262015308474],
          [-38.3148193359375, -11.280773781192053],
          [-39.5123291015625, -11.78670268848142],
          [-40.616455078125, -13.2399454992863],
          [-40.6439208984375, -14.243086862716888],
          [-41.396484375, -14.838611553384807],
          [-41.90185546875, -14.966013251567153],
          [-42.5390625, -15.802824941413187],
          [-42.550048828125, -17.14603949574698],
          [-43.890380859375, -18.594188856740427],
          [-43.7255859375, -19.575317892869442],
          [-44.670737078228704, -19.268247267184112],
          [-45.0439453125, -19.414792438099557],
          [-45.46142578125, -19.91138351415555],
          [-46.021728515625, -20.7047387200555],
          [-46.966552734375, -20.365227537412434],
          [-47.098388671875, -19.963022929830807],
          [-47.493896484375, -19.611543503814232],
          [-47.96630859375, -19.559790136497398],
          [-48.416748046875, -19.559790136497398],
          [-49.04296875, -19.694314241825747],
          [-49.998779296875, -19.373340713364044],
          [-49.493408203125, -19.2489223284628],
          [-47.757568359375, -19.020577110966794],
          [-47.98828125, -18.323240460443383],
          [-48.62548828125, -17.75914975540014],
          [-49.207763671875, -17.790535393588964],
          [-51.119384765625, -18.417078658661257],
          [-51.85546875, -20.097206227083888],
          [-52.88818359375, -21.841104749065032],
          [-54.33837890625, -21.5041855007784],
          [-55.294189453125, -21.80030805097258],
          [-55.4150390625, -23.23125092389778],
          [-55.458984375, -24.12670195868167],
          [-54.6240234375, -23.93605491459982],
          [-54.404296875, -24.39713301739104],
          [-54.744873046875, -25.681137335685307],
          [-53.96484375, -25.770213848960246],
          [-53.85498046875, -26.95145308349825],
          [-54.9755859375, -27.498526722798296],
          [-55.47821044921875, -28.069556808283593],
          [-55.14389607787536, -28.294019340320542],
          [-54.843276751098756, -28.455948569287795],
          [-54.47755233547173, -28.574911416473032],
          [-54.08786740173093, -28.686648423642083],
          [-53.37158203125, -29.046565622728846],
          [-53.743743896484375, -29.424048845483828],
          [-53.89471068932722, -29.476890814513165],
          [-53.96333274830807, -29.516463876552184],
          [-53.985933193466906, -29.466627605546755],
          [-54.01399085963391, -29.362974979934112],
          [-54.0957995760449, -29.356021030068643],
          [-54.154222913515014, -29.314313841353393],
          [-54.23853854957156, -29.313083872479314],
          [-54.34931514088896, -29.360217477461482],
          [-54.37451966390222, -29.251873401377896],
          [-54.41987650022799, -29.22165031302486],
          [-54.561629026807395, -29.255956269857826],
          [-54.62100646401336, -29.232741355021034],
          [-54.69684636444414, -29.21513553302705],
          [-54.80832142057618, -29.211841387289443],
          [-54.86783664015559, -29.201620760910515],
          [-54.861083387822305, -29.286939284390016],
          [-54.936762801395275, -29.29077843021244],
          [-54.934557778030864, -29.317890891762687],
          [-54.89637833995612, -29.355389471176345],
          [-54.918606622151415, -29.380926390970743],
          [-54.971869817666686, -29.365728890813415],
          [-55.011401674227045, -29.360099098278926],
          [-55.0234626088652, -29.31855224246986],
          [-55.11566162109375, -29.29358522654161],
          [-55.1383134470135, -29.344453559309528],
          [-55.169219970703125, -29.438401595657513],
          [-55.054316400333846, -29.54316711975633],
          [-54.971431829700066, -29.560110616981305],
          [-54.8246791955296, -29.481057814453678],
          [-54.772348103860324, -29.547101213390164],
          [-54.65399970066687, -29.59875323709413],
          [-54.529287966222284, -29.596952601022753],
          [-54.42106275663161, -29.592662068126202],
          [-54.25211822648299, -29.557985162004776],
          [-54.23838114877856, -29.6057018525106],
          [-54.143545282885725, -29.65695554739698],
          [-53.98760428093533, -29.63544046885246],
          [-53.89482321115236, -29.64842475879738],
          [-53.91323116566139, -29.695990247187094],
          [-53.82999936609964, -29.766196563619406],
          [-53.732642004168156, -29.70057719271144],
          [-53.5803125276326, -29.792259794207105],
          [-53.41292085991745, -29.808497111211725],
          [-53.20404052734375, -29.93589521337243],
          [-52.404220884110465, -30.002515899452863],
          [-51.33087158203125, -29.900186637177384],
          [-50.09765625, -30.002516938570686]]]);

// Define the input and output versions
var vesion_in = '77'; // Input version
var versao_out = '78'; // Output version

// Define the description of the process
var descricao = 'Remove raras do meio'; // Description of the process

// Define prefixes for input and output assets
var prefixo_in = 'MA_S2_p09_v'; // Input asset prefix
var prefixo_out = 'MA_S2_p10a_v'; // Output asset prefix
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-ma-S2/'; // Output directory

// Load the classification image
var class7 =  ee.Image(dirout+prefixo_in+vesion_in); // Load the classification image from the specified asset

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js'); // Import the palettes module

// Define the palettes for visualization
var vis = {
    'min': 0, // Minimum value for visualization
    'max': 69, // Maximum value for visualization
    'palette': palettes.get('classification9') // Palette for visualization
};
var vis2 = {
    'bands': 'classification_2016', // Band to visualize
    'min': 0, // Minimum value for visualization
    'max': 69, // Maximum value for visualization
    'palette': palettes.get('classification9') // Palette for visualization
};

//Map.addLayer(class7.select('classification_2021'), vis, 'class original', true); // Add the original classification to the map

//var col_beta = ee.Image('projects/mapbiomas-public/assets/brazil/lulc/collection_S2_beta/collection_LULC_S2_beta') // Load the beta collection
//Map.addLayer(col_beta.select('classification_2021'), vis, 'col_beta 2021', true); // Add the beta collection to the map

//// Define the years to process
//var anos = [2016,2017,2018,2019,2020,2021,2022,2023];
//            
//// Loop through the years and apply corrections
//for (var i_ano=0;i_ano<anos.length; i_ano++){
//  var ano = anos[i_ano];
//  
//  // Select the classification for the current year
//  var class_ano = class7.select('classification_'+ano);
//  
//  var col_beta_agr = col_beta.select('classification_2021').remap([9,19,36],[21,21,21]).rename('classification_'+ano)
//  
//  class_ano = class_ano.blend(col_beta_agr)
//  if (i_ano == 0){ var class_corrigido = class_ano; }  
//  else {class_corrigido = class_corrigido.addBands(class_ano); }
//}
//var class7 = class_corrigido

//Map.addLayer(class7.select('classification_2021'), vis, 'class correcao 1 AGR beta', true);

// Create masks for rare classes
var mask03_neq = class7.select('classification_2017').neq(3) // Create a mask for class 3 (neq = not equal)
            .add(class7.select('classification_2023').neq(3)).remap([2],[1]); // Combine masks for 2017 and 2023
var mask04_neq = class7.select('classification_2016').neq(4) // Create a mask for class 4 (neq = not equal)
            .add(class7.select('classification_2023').neq(4)).remap([2],[1]); // Combine masks for 2016 and 2023
var mask11_neq = class7.select('classification_2016').neq(11) // Create a mask for class 11 (neq = not equal)
            .add(class7.select('classification_2023').neq(11)).remap([2],[1]); // Combine masks for 2016 and 2023
var mask12_neq = class7.select('classification_2016').neq(12) // Create a mask for class 12 (neq = not equal)
            .add(class7.select('classification_2023').neq(12)).remap([2],[1]); // Combine masks for 2016 and 2023
var mask29_neq = class7.select('classification_2016').neq(29) // Create a mask for class 29 (neq = not equal)
            .add(class7.select('classification_2023').neq(29)).remap([2],[1]); // Combine masks for 2016 and 2023

//Map.addLayer(mask04_neq, {}, 'mask04_neq', true); // Add the mask for class 4 to the map
//Map.addLayer(mask29_neq, {}, 'mask29_neq', true); // Add the mask for class 29 to the map

var mask03_eq = class7.select('classification_2017').eq(3) // Create a mask for class 3 (eq = equal)
            .add(class7.select('classification_2023').eq(3)).remap([2],[1]); // Combine masks for 2017 and 2023
var mask04_eq = class7.select('classification_2016').eq(4) // Create a mask for class 4 (eq = equal)
            .add(class7.select('classification_2023').eq(4)).remap([2],[1]); // Combine masks for 2016 and 2023
var mask11_eq = class7.select('classification_2016').eq(11) // Create a mask for class 11 (eq = equal)
            .add(class7.select('classification_2023').eq(11)).remap([2],[1]); // Combine masks for 2016 and 2023
var mask12_eq = class7.select('classification_2016').eq(12) // Create a mask for class 12 (eq = equal)
            .add(class7.select('classification_2023').eq(12)).remap([2],[1]); // Combine masks for 2016 and 2023
var mask29_eq = class7.select('classification_2016').eq(29) // Create a mask for class 29 (eq = equal)
            .add(class7.select('classification_2023').eq(29)).remap([2],[1]); // Combine masks for 2016 and 2023

//Map.addLayer(mask04_eq, {}, 'mask04_eq', true); // Add the mask for class 4 to the map
//Map.addLayer(mask29_eq, {}, 'mask29_eq', true); // Add the mask for class 29 to the map

// Define the years to process
var anos = [2016,2017,2018,2019,2020,2021,2022,2023]; // Define the years to process

// Loop through the years and apply corrections
for (var i_ano=0;i_ano<anos.length; i_ano++){ // Loop through the years
  var ano = anos[i_ano]; // Get the current year

  // Select the classification for the current year
  var class_ano = class7.select('classification_'+ano); // Select the classification for the current year

  // Apply corrections for rare classes
  var ganho03 = class_ano.mask(mask03_neq).remap([3],[21]); // Apply correction for class 3 (gain)
  var ganho04 = class_ano.mask(mask04_neq).remap([4],[21]); // Apply correction for class 4 (gain)
  var ganho11 = class_ano.mask(mask11_neq).remap([11],[21]); // Apply correction for class 11 (gain)
  var ganho12 = class_ano.mask(mask12_neq).remap([12],[21]); // Apply correction for class 12 (gain)
  var ganho29 = class_ano.mask(mask29_neq).remap([29],[21]); // Apply correction for class 29 (gain)

  var perda03 = class_ano.mask(mask03_eq).remap([21],[3]); // Apply correction for class 3 (loss)
  var perda04 = class_ano.mask(mask04_eq).remap([21],[4]); // Apply correction for class 4 (loss)
  var perda11 = class_ano.mask(mask11_eq).remap([21],[11]); // Apply correction for class 11 (loss)
  var perda12 = class_ano.mask(mask12_eq).remap([21],[12]); // Apply correction for class 12 (loss)
  var perda29 = class_ano.mask(mask29_eq).remap([21],[29]); // Apply correction for class 29 (loss)
  
  // Blend the original classification with the corrected classifications
  var class_ano2 = class_ano.blend(ganho03).blend(ganho04).blend(ganho11).blend(ganho12).blend(ganho29)
                       .blend(perda03).blend(perda04).blend(perda11).blend(perda12).blend(perda29); // Blend the original classification with the corrected classifications

  // Combine the corrected classifications for all years
  if (i_ano == 0){ var class_corrigido = class_ano; }  // Initialize the corrected classification for the first year
  else {class_corrigido = class_corrigido.addBands(class_ano); } // Add the corrected classification for the current year to the combined image
}

// Add the original and corrected classifications to the map
Map.addLayer(class7, vis2, 'class_original', true); // Add the original classification to the map
Map.addLayer(class_corrigido, vis2, 'class_corrigido', true); // Add the corrected classification to the map

class_corrigido = class_corrigido
.set('territory', 'BRAZIL') // Set the territory metadata
.set('biome', 'MATAATLANTICA') // Set the biome metadata
.set('source', 'arcplan') // Set the source metadata
.set('version', versao_out) // Set the version metadata
.set('collection_id', 2) // Set the collection ID metadata
.set('description', 'estabiliza ganho e perda') // Set the description metadata

// Export the final classification image to an asset
Export.image.toAsset({
    "image": class_corrigido.toInt8(), // Convert the image to int8
    'description': prefixo_out+versao_out, // Set the description for the asset
    'assetId': dirout+prefixo_out+versao_out, // Set the asset ID
    "scale": 10, // Set the scale for the asset
    "pyramidingPolicy": {
        '.default': 'mode'
    }, // Set the pyramiding policy for the asset
    "maxPixels": 1e13, // Set the maximum number of pixels for the asset
    "region": limite_MA2 // Set the region for the asset
});
