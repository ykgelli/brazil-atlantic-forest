// Define the stable version
var versao_estavel = '2';

// Define the output version
var versao_out = '1';

// Define the directory for stable samples
var direstavel = 'projects/mapbiomas-workspace/AMOSTRAS/S2_2024/MATA_ATLANTICA/'

// Define the output directory
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/S2_2024/MATA_ATLANTICA/';

// Load the IBGE biomes and filter for the Atlantic Forest
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41')
var bioma250mil_MA = biomes.mask(biomes.eq(2))

// Add the Atlantic Forest biome to the map
Map.addLayer(bioma250mil_MA, {}, 'bioma250mil_MA', false)

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define the visualization parameters
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

// Load the Atlantic Forest regions
var regioesCollection = ee.FeatureCollection('projects/mapbiomas-workspace/AUXILIAR/Mata_Atlantica_regions_col6_area2000')

// Print the regions collection
print(regioesCollection)

// Add the regions collection to the map
Map.addLayer(regioesCollection)

// Load the collection 9 image and add a mask for class 50 to the map
var colecao9 = ee.Image('projects/mapbiomas-public/assets/brazil/lulc/collection9/mapbiomas_collection90_integration_v1')
Map.addLayer(colecao9.select('classification_2023').eq(50).selfMask(), vis, 'Classes LANDSAT 23', false);

// Load the stable version 1 image and add it to the map
var mapa_estavel_S2 = ee.Image(direstavel+'MA_amostras_estaveis16a22_colS2_v'+versao_estavel)
Map.addLayer(mapa_estavel_S2, vis, 'mapa_estavel_S2', false);

// Define the number of samples for each class in each region
var n_pr1 = 3000   //primary
var n_se1 = 2000   //secondary
var n_ra1 = 300    //rare
var zero1 = 0

var n_pr2 = 4000   //primary
var n_se2 = 1000   //secondary
var n_ra2 = 500    //rare
var zero2 = 0

// Define the list of regions and the number of samples for each class
var regioes_lista = [//regiao,     3,    21,     4,     9,    12,      50,    29,    22,     33,],
                    ['reg_01', n_se1, n_pr2, n_ra1,  n_ra1, n_ra2,  zero1, n_ra1, n_ra2, n_ra1,],
                    ['reg_02', n_pr1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_03', n_se1, n_pr2, zero1,  n_ra1, zero1,  n_ra1, n_ra1, n_ra1, n_ra1,],
                    ['reg_04', n_pr1, n_pr1, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_05', n_pr1, n_pr1, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_06', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_07', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_08', n_se1, n_pr1, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_09', n_se1, n_pr2, n_ra1,  n_ra1, zero1,  zero1, n_ra2, n_ra1, n_ra1,],
                    ['reg_10', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_11', n_se1, n_pr1, zero1,  zero1, zero1,  zero1, n_ra1, n_ra1, n_ra1,],
                    ['reg_12', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_13', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_14', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_15', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_16', n_se1, n_pr1, zero1,  n_ra1, zero1,  zero1, n_ra1, n_ra1, n_ra1,],
                    ['reg_17', n_se1, n_pr2, zero1,  zero1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_18', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_19', n_pr1, n_pr1, zero1,  n_ra1, zero1,  n_ra1, n_ra1, n_ra1, n_ra1,],
                    ['reg_20', n_se1, n_pr2, zero1,  n_ra1, zero1,  n_ra2, n_ra1, n_ra1, n_ra1,],
                    ['reg_21', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_22', n_se1, n_pr2, n_se2,  zero1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_23', n_se1, n_pr1, n_se2,  n_ra1, zero1,  zero1, n_ra2, n_ra1, n_ra1,],
                    ['reg_24', n_se1, n_se1, zero1,  zero1, n_pr1,  zero1, n_ra1, n_ra1, n_ra1,],
                    ['reg_25', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_26', n_se1, n_pr2, zero1,  n_ra1, n_ra1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_27', n_se1, n_pr2, n_se2,  zero1, zero1,  n_ra1, zero1, n_ra1, n_ra1,],
                    ['reg_28', n_se1, n_pr1, zero1,  n_ra1, n_ra1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_29', n_se1, n_pr2, zero1,  n_ra1, zero1,  zero1, zero1, n_ra1, n_ra1,],
                    ['reg_30', n_se1, n_pr1, zero1,  zero1, zero1,  zero1, n_ra1, n_ra1, n_ra2,],
              ]

// Loop over the list of regions
for (var i_regiao=0;i_regiao<regioes_lista.length; i_regiao++){
  // Get the current region information
  var lista = regioes_lista[i_regiao];
  var regiao = lista[0];

  // Filter the regions collection to get the current region
  var limite = regioesCollection.filterMetadata('reg_id', "equals", regiao);

  // Create a stratified sample of the stable image for the current region
  var reg_training_estavel = mapa_estavel_S2.stratifiedSample({
    'numPoints': 0,
    'classBand': 'reference',
    'region': limite,
    'classValues': [       3,       21,         4,       9,        12,       50,       29,       22,        33],
    'classPoints': [lista[1], lista[2],  lista[3], lista[4], lista[5], lista[6], lista[7], lista[8],   lista[9]],
    'scale': 10, 
    'seed': 1, 
    'geometries': true
  })
    
  // Set the region ID as a property for each feature in the sample
  reg_training_estavel = reg_training_estavel.map(
            function (feature) {
                return feature.set('reg_id', regiao);
            });

  // If this is the first region, initialize the training sample collection
  if (i_regiao == 0){ var training_estavel = reg_training_estavel }  
  // Otherwise, merge the current region's sample into the existing collection
  else {training_estavel = training_estavel.merge(reg_training_estavel); }
}

// Add the training sample collection to the map
Map.addLayer(training_estavel)
//Map.addLayer(training_estavel)

// Print the size of the training sample collection
print(training_estavel.size())

// Export the training sample collection to an asset
Export.table.toAsset(training_estavel, 'samples_S2_stable_v'+versao_out+'_reg', dirout+ 'samples_S2_stable_v'+versao_out+'_reg');
