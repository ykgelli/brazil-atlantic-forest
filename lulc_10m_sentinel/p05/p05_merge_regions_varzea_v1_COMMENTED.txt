var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-56.05851880152852, -30.04613371617718],
          [-49.20305005152852, -30.841736663987348],
          [-41.46867505152852, -23.861579784474333],
          [-34.17375317652852, -8.163484389272043],
          [-34.26164380152852, -4.801825741437062],
          [-35.66789380152852, -4.582835761516412],
          [-49.07121411402852, -16.947367124654484],
          [-56.10246411402852, -21.01873071079243]]]);

// Define input variables
var v_in = '1';
var versao_out = '10';
var VeightConnected = true;
var prefixo_out = 'MA_S2_p05_varzea_v';
var dir_in = 'projects/mapbiomas-workspace/COLECAO7/classificacao-ma/';
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-ma-S2/';

// Define year and biome
var ano = 2021;
var bioma = "MATA ATÂNTICA";

////*************************************************************
// Do not Change from these lines
////*************************************************************

// Import palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Define visualization parameters
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

// Load Landsat images
var sul = ee.Image('projects/mapbiomas-workspace/COLECAO7/classificacao-ma/varzea-RF_SENTINEL2_norte_SUL_v2');
var norte = ee.Image('projects/mapbiomas-workspace/COLECAO7/classificacao-ma/varzea-RF_SENTINEL2_NORTE_v2');
var centro1 = ee.Image('projects/mapbiomas-workspace/COLECAO7/classificacao-ma/varzea-RF_SENTINEL2_CENTRO1_v2');
var centro2 = ee.Image('projects/mapbiomas-workspace/COLECAO7/classificacao-ma/varzea-RF_SENTINEL2_CENTRO2_v2');

// Create an image collection from the Landsat images
var image = ee.ImageCollection.fromImages([sul, norte, centro1, centro2]).min();

// Add the image to the map
Map.addLayer(image);

// Print the image
print(image);

// Define years for analysis
var years = [
  2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023
    ];

/**
 * User defined functions
 */

// Function to apply gap fill to an image
var applyGapFill = function (image) {

    // Apply gap fill from t0 to tn
    var imageFilledt0tn = bandNames.slice(1)
        .iterate(
            function (bandName, previousImage) {

                // Select the current band
                var currentImage = image.select(ee.String(bandName));

                // Cast previousImage to an ee.Image
                previousImage = ee.Image(previousImage);

                // Unmask the current image using the previous image
                currentImage = currentImage.unmask(
                    previousImage.select([0]));

                // Add the current image to the previous image
                return currentImage.addBands(previousImage);

            }, ee.Image(imageAllBands.select([bandNames.get(0)]))
        );

    // Cast imageFilledt0tn to an ee.Image
    imageFilledt0tn = ee.Image(imageFilledt0tn);

    // Apply gap fill from tn to t0
    var bandNamesReversed = bandNames.reverse();

    var imageFilledtnt0 = bandNamesReversed.slice(1)
        .iterate(
            function (bandName, previousImage) {

                // Select the current band
                var currentImage = imageFilledt0tn.select(ee.String(bandName));

                // Cast previousImage to an ee.Image
                previousImage = ee.Image(previousImage);

                // Unmask the current image using the previous image
                currentImage = currentImage.unmask(
                    previousImage.select(previousImage.bandNames().length().subtract(1)));

                // Add the current image to the previous image
                return previousImage.addBands(currentImage);

            }, ee.Image(imageFilledt0tn.select([bandNamesReversed.get(0)]))
        );

    // Cast imageFilledtnt0 to an ee.Image and select the original band names
    imageFilledtnt0 = ee.Image(imageFilledtnt0).select(bandNames);

    // Return the gap-filled image
    return imageFilledtnt0;
};

// Get band names list
var bandNames = ee.List(
    years.map(
        function (year) {
            return 'classification_' + String(year);
        }
    )
);

// Generate a histogram dictionary of [bandNames, image.bandNames()]
var bandsOccurrence = ee.Dictionary(
    bandNames.cat(image.bandNames()).reduce(ee.Reducer.frequencyHistogram())
);

// Print the bands occurrence dictionary
print(bandsOccurrence);

// Insert a masked band
var bandsDictionary = bandsOccurrence.map(
    function (key, value) {
        return ee.Image(
            ee.Algorithms.If(
                ee.Number(value).eq(2),
                image.select([key]).byte(),
                ee.Image().rename([key]).byte().updateMask(image.select(0))
            )
        );
    }
);

// Convert dictionary to image
var imageAllBands = ee.Image(
    bandNames.iterate(
        function (band, image) {
            return ee.Image(image).addBands(bandsDictionary.get(ee.String(band)));
        },
        ee.Image().select()
    )
);

// Generate image pixel years
var imagePixelYear = ee.Image.constant(years)
    .updateMask(imageAllBands)
    .rename(bandNames);

// Apply the gap fill
var imageFilledtnt0 = applyGapFill(imageAllBands);
var imageFilledYear = applyGapFill(imagePixelYear);

// Add the original image to the map
Map.addLayer(image.select('classification_'+ano), vis, 'original',false);

// Add the filtered image to the map
Map.addLayer(imageFilledtnt0.select('classification_'+ano), vis, 'filtered'); //.mask(bioma250mil_MA)

// Add connected pixels bands
var imageFilledConnected = imageFilledtnt0.addBands(
    imageFilledtnt0
        .connectedPixelCount(100, true)
        .rename(bandNames.map(
            function (band) {
                return ee.String(band).cat('_conn')
            }
        ))
);

// Print the image with connected pixels bands
print(imageFilledConnected);

// Set metadata for the classified image
var classified85a21 = imageFilledConnected
.set('territory', 'BRAZIL')
.set('biome', 'MATA ATÂNTICA')
.set('source', 'arcplan')
.set('version', versao_out)
//.set('year', versao_out)
.set('collection_id', 2);

// Print the classified image
//print(classified85a21)

// Export the classified image to an asset
Export.image.toAsset({
  "image": classified85a21.toInt8(),
  "description": prefixo_out + versao_out,
  "assetId": dirout + prefixo_out + versao_out,
  "scale": 10,
  "pyramidingPolicy": {
      '.default': 'mode'
  },
  "maxPixels": 1e13,
  "region": geometry
});    

// Load the regions collection
var regioesCollection = ee.FeatureCollection('projects/mapbiomas-workspace/AUXILIAR/Mata_Atlantica_regions_col6_area2000');

// Filter the regions collection by region ID
var limite = regioesCollection//.filterMetadata('reg_id', "equals", regiao);

// Create a blank image
var blank = ee.Image(0).mask(0);

// Paint the outline of the regions
var outline = blank.paint(limite, 'AA0000', 2); 

// Define visualization parameters for the outline
var visPar = {'palette':'000000','opacity': 0.6};

// Add the outline to the map
Map.addLayer(outline, visPar, 'regioes', false);

// Add the regions collection to the map
Map.addLayer(regioesCollection);
